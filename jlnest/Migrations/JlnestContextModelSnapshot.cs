// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(JlnestContext))]
    partial class JlnestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityId" }, "community_id");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'private'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityId" }, "community_id")
                        .HasDatabaseName("community_id1");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ChatParticipant", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastRead")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_read");

                    b.HasKey("ChatId", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("chat_participants", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likes_count")
                        .HasDefaultValueSql("'0'");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)")
                        .HasColumnName("post_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuthorId" }, "author_id");

                    b.HasIndex(new[] { "PostId" }, "idx_comments_post");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("text")
                        .HasColumnName("banner_url");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("MemberCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("member_count")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Tags")
                        .HasColumnType("json")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatorId" }, "creator_id");

                    b.ToTable("communities", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CommunityOverview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_activity");

                    b.Property<int?>("MemberCount")
                        .HasColumnType("int")
                        .HasColumnName("member_count")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<long>("PostsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("posts_count");

                    b.ToTable((string)null);

                    b.ToView("community_overview", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Medium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("char(36)")
                        .HasColumnName("album_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UploadedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("uploaded_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AlbumId" }, "album_id");

                    b.HasIndex(new[] { "UploadedBy" }, "uploaded_by");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("ReadStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("read_status")
                        .HasDefaultValueSql("'0'");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sender_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChatId", "CreatedAt" }, "idx_messages_chat");

                    b.HasIndex(new[] { "SenderId" }, "sender_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasDefaultValueSql("'0'");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("source_id");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId", "IsRead", "CreatedAt" }, "idx_notifications_user");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("author_id");

                    b.Property<int>("CommentsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comments_count")
                        .HasDefaultValueSql("'0'");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Images")
                        .HasColumnType("json")
                        .HasColumnName("images");

                    b.Property<int>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likes_count")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("visibility")
                        .HasDefaultValueSql("'public'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuthorId" }, "author_id")
                        .HasDatabaseName("author_id1");

                    b.HasIndex(new[] { "CommunityId", "CreatedAt" }, "idx_posts_community");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.StoreItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("store_items", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Subscription", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("community_id");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'member'");

                    b.HasKey("UserId", "CommunityId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommunityId" }, "community_id")
                        .HasDatabaseName("community_id2");

                    b.HasIndex(new[] { "UserId" }, "idx_subscriptions_user");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("item_id");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ItemId" }, "item_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<int?>("Coins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("coins")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_online")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("ThemePreference")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("theme_preference")
                        .HasDefaultValueSql("'light'");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserActivity", b =>
                {
                    b.Property<long>("CommentsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("comments_count");

                    b.Property<long>("CommunitiesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("communities_count");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'uuid()'");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_online")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("PostsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("posts_count");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.ToTable((string)null);

                    b.ToView("user_activity", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserInventory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("item_id");

                    b.Property<bool>("IsEquipped")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_equipped")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("purchased_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "idx_user_inventory");

                    b.HasIndex(new[] { "ItemId" }, "item_id")
                        .HasDatabaseName("item_id1");

                    b.ToTable("user_inventory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Album", b =>
                {
                    b.HasOne("Domain.Models.Community", "Community")
                        .WithMany("Albums")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("albums_ibfk_1");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.HasOne("Domain.Models.Community", "Community")
                        .WithMany("Chats")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("chats_ibfk_1");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Domain.Models.ChatParticipant", b =>
                {
                    b.HasOne("Domain.Models.Chat", "Chat")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_participants_ibfk_1");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_participants_ibfk_2");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("comments_ibfk_2");

                    b.HasOne("Domain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("comments_ibfk_1");

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Models.Community", b =>
                {
                    b.HasOne("Domain.Models.User", "Creator")
                        .WithMany("Communities")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("communities_ibfk_1");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Models.Medium", b =>
                {
                    b.HasOne("Domain.Models.Album", "Album")
                        .WithMany("Media")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("media_ibfk_1");

                    b.HasOne("Domain.Models.User", "UploadedByNavigation")
                        .WithMany("Media")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("media_ibfk_2");

                    b.Navigation("Album");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.HasOne("Domain.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_1");

                    b.HasOne("Domain.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_2");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notifications_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.HasOne("Domain.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("posts_ibfk_1");

                    b.HasOne("Domain.Models.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("posts_ibfk_2");

                    b.Navigation("Author");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Domain.Models.Subscription", b =>
                {
                    b.HasOne("Domain.Models.Community", "Community")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscriptions_ibfk_2");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscriptions_ibfk_1");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.HasOne("Domain.Models.StoreItem", "Item")
                        .WithMany("Transactions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("transactions_ibfk_2");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transactions_ibfk_1");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserInventory", b =>
                {
                    b.HasOne("Domain.Models.StoreItem", "Item")
                        .WithMany("UserInventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_inventory_ibfk_2");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserInventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_inventory_ibfk_1");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Album", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.Navigation("ChatParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Models.Community", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Chats");

                    b.Navigation("Posts");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Models.StoreItem", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("ChatParticipants");

                    b.Navigation("Comments");

                    b.Navigation("Communities");

                    b.Navigation("Media");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("Subscriptions");

                    b.Navigation("Transactions");

                    b.Navigation("UserInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
